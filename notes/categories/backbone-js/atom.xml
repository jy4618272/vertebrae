<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbone.js | Vertebrae framework]]></title>
  <link href="http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/"/>
  <updated>2012-07-12T11:32:22-07:00</updated>
  <id>http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/</id>
  <author>
    <name><![CDATA[Bill Heaton]]></name>
    <email><![CDATA[pixelhandler@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimize and Build a Backbone.js JavaScript application with Require.JS using Packages]]></title>
    <link href="http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/optimize-and-build-a-backbone-dot-js-javascript-application-with-require-dot-js-using-packages/2012/01/09/"/>
    <updated>2012-01-09T03:19:00-08:00</updated>
    <id>http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/optimize-and-build-a-backbone-dot-js-javascript-application-with-require-dot-js-using-packages/2012/01/optimize-and-build-a-backbone-dot-js-javascript-application-with-require-dot-js-using-packages</id>
    <content type="html"><![CDATA[<p>When a JavaScript application is too complex or large to build in a single file, grouping the application’s components into packages allows for script dependencies to download in parallel, and facilitates only loading <strong>packaged</strong> and other modular code as the site experience requires the specific set of dependencies.</p>

<p>Require.JS, the (JavaScript) module loading library, has an <a href="http://requirejs.org/docs/optimization.html" title="Require.JS optimizer">optimizer</a> to build a JavaScript-based application and provides various options. A build profile is the recipe for your build, much like a build.xml file is used to build a project with ANT. The benefit of building with <strong>r.js</strong> not only results in speedy script loading with minified code, but also provides a way to package components of your application.</p>

<ul>
<li><a href="http://requirejs.org/docs/optimization.html#onejs" title="Optimizing one JavaScript file">Optimizing one JavaScript file</a></li>
<li><a href="http://requirejs.org/docs/optimization.html#wholeproject" title="Optimizing a whole project">Optimizing a whole project</a></li>
<li><a href="http://requirejs.org/docs/faq-optimization.html#priority" title="Optimizing a project in layers or packages">Optimizing a project in layers or packages</a></li>
</ul>


<p>In a complex application, organizing code into <em>packages</em> is an attractive build strategy. The build profile in this article is based on an test application currently under development (files list below). The application framework is built with open source libraries. The main objective in this build profile is to optimize an application developed with <a href="http://documentcloud.github.com/backbone/" title="Backbone.js">Backbone.js</a> using modular code, following the <a href="https://github.com/amdjs/amdjs-api/wiki/AMD" title="Asynchronous Module Definition (AMD) wiki page">Asynchronous Module Definition (AMD)</a> format. AMD and Require.JS provide the structure for writing modular code with dependencies. Backbone.js provides the code organization for developing models, views and collections and also interactions with a RESTful API.</p>

<!--more-->


<p>Below is an outline of the application’s file organization, followed by the build profile to build modular (or packaged) layers a JavaScript driven application.</p>

<h3>File organization</h3>

<p>Assume the following directories and file organization, with app.build.js as the build profile (a sibling to both source and release directories). Note that the files in the list below named <em>section</em> can be any component of the application, e.g. <em>header</em>, <em>login</em>)</p>

<p><code>``text  
.-- app.build.js
|-- app-release
</code>-- app-src</p>

<pre><code>|-- collections
|   |-- base.js
|   |-- sections-segments.js
|   `-- sections.js
|-- docs
|   `--docco.css
|-- models
|   |-- base.js
|   |-- branding.js
|   `-- section.js
|-- packages
|   |-- header
|   |   |-- models
|   |   |   |-- nav.js
|   |   |   `-- link.js
|   |   |-- templates
|   |   |   |-- branding.js
|   |   |   |-- nav.js
|   |   |   `-- links.js
|   |   `-- views
|   |       |-- nav.js
|   |       |-- branding.js
|   |       `-- link.js
|   |-- header.js
|   `-- ... more packages here e.g. cart, checkout ...
|-- syncs
|   |-- rest
|   |   `-- sections.js
|   |-- factory.js
|   `-- localstorage.js
|-- test
|   |-- fixtures
|   |   `-- sections.json
|   |-- header
|   |   |-- index.html
|   |   `-- spec.js
|   |-- lib
|   |   `-- Jasmine
|   |-- models
|   |-- utils
|   |-- global-spec.js
|-- utils
|   |-- ajax.js
|   |-- baselib.js
|   |-- debug.js
|   |-- localstorage.js
|   `-- shims.js
|-- vendor
|-- |-- backbone-min.js
|   |-- jquery-1.7.1.min.js
|   |-- jquery.mobile-1.0.min.js
|   |-- json2.js
|   |-- modernizr-1.6.min.js
|   |-- mustache.js
|   |-- require.js
|   |-- text.js
|   `-- underscore.js
|-- views
|   |-- base.js
|   `-- collection.js
|-- application.js
|-- collections.js
|-- index.html
|-- main.js
|-- models.js
|-- syncs.js
|-- utils.js
|-- vendor.js
`-- views.js
</code></pre>

<p>```</p>

<h3>Build profile to optimize modular dependencies with code organized in packages</h3>

<p>The build profile can be organized to <a href="http://requirejs.org/docs/faq-optimization.html#priority" title="optimize modular dependencies in packages">divide parallel downloads for various sections of the application</a>.</p>

<p>This strategy demonstrated builds common or site-wide groups of (core) <em>models</em>, <em>views</em>, collections which are extended from a base.js constructor which extends the appropriate backbone method, e.g. Backbone.Model. The <em>packages</em> directory organizes code by section / responsibility, e.g. cart, checkout, etc. Notice that within the example <em>header</em> package the directory structure is similar to the app root directory file structure. A <em>package</em> (of modularized code) has dependencies from the common libraries in your application and also has specific code for the packages execution alone; other packages should not require another packages dependencies. A <em>utils</em> directory has shims, helpers, and common library code to support the application. A <em>syncs</em> directory to define persistence with your RESTful api and/or localStorage. The <em>vendor</em> libraries folder will not be built, there is no need to do so, you may decide to use a CDN (then set these paths to : <em><a href="http://requirejs.org/docs/optimization.html#empty" title="empty:">empty:</a></em>). And finally a <em>test</em> directory for <a href="http://pivotal.github.com/jasmine/" title="Jasmine is a behavior-driven development framework for testing your JavaScript code">Jasmine</a> unit test specs, which may be ignored in the build as well if you choose.</p>

<p>Also notice the there are .js files named the same as the directories, these are the files listed in the paths. these are strategic to group sets of files to build, examples follow the build profile below.</p>

<p>```javascript
({</p>

<pre><code>appDir: './app-src',
baseUrl: './',
dir: './app-build',
optimize: 'uglify',
paths: {
    // will not build 3rd party code, it's already built
    'text'         : 'vendor/text',
    'json2'        : 'vendor/json2.min',
    'modernizr'    : 'vendor/modernizr-1.6.min',
    'jquery'       : 'vendor/jquery-1.7.1',
    'jquerymobile' : 'vendor/jquery.mobile-1.0.min.js',
    'underscore'   : 'vendor/underscore',
    'mustache'     : 'vendor/mustache',
    'backbone'     : 'vendor/backbone',
    // files that define dependencies...
    // ignore vendor libraries, but need a group to do so
    'vendor'       : 'vendor',
    // application modules/packages these files define dependencies
    // and may also group modules into objects if needed to require
    // by groups rather than individual files
    'utils'        : 'utils',
    'models'       : 'models',
    'views'        : 'views',
    'collections'  : 'collections',
    // packages to build
    'header'       : 'packages/header'
    //... more packages
},
modules: [
    // Common libraries, Utilities, Syncs, Models, Views, Collections
    {
        name: 'utils',
        exclude: ['vendor']
    },
    {
        name: 'syncs',
        exclude: ['vendor', 'utils']
    },
    {
        name: 'models',
        exclude: ['vendor', 'utils', 'syncs']
    },
    {
        name: 'views',
        exclude: ['vendor', 'utils', 'syncs', 'models']
    },
    {
        name: 'collections',
        exclude: ['vendor', 'utils', 'syncs', 'models', 'views']
    },
    // Packages
    {
        name: 'header',
        exclude: ['vendor', 'utils', 'syncs', 'models', 'views', 'collections']
    }
    // ... and so much more ...
]
</code></pre>

<p>})
```</p>

<p>The above build profile is designed for balancing scalability and performance.</p>

<p><strong>Examples of the grouped sets of code dependencies</strong></p>

<p>The contents of the vendor.js which is not built into a package may use some <em>no conflict</em> calls as well.</p>

<p>```javascript
// List of vendor libraries, e.g. jQuery, Underscore, Backbone, etc.<br/>
// this module is used with the r.js optimizer tool during build<br/>
// @see <a href="http://requirejs.org/docs/faq-optimization.html">http://requirejs.org/docs/faq-optimization.html</a>
define([ "jquery", "underscore", "backbone", "modernizr", "mustache" ],
function ($,        _,            Backbone,   Modernizr,   Mustache) {</p>

<pre><code>// call no conflicts so if needed you can use multiple versions of $
$.noConflict();
_.noConflict();
Backbone.noConflict();
</code></pre>

<p>});
```</p>

<p>For your application common library code.</p>

<p>```javascript
// List of utility libraries,
define([ "utils/ajax", "utils/baselib", "utils/localstorage", "utils/debug", "utils/shims" ],
function (ajax,         baselib,         localstorage,         debug) {</p>

<pre><code>return {
    "ajax" : ajax,
    "baselib" : baselib,
    "localstorage" : localstorage,
    "debug" : debug
};
// the shim only extend JavaScript when needed, e.g. Object.create
</code></pre>

<p>});
```</p>

<p>An example where you intend to use require the common models in another package file.</p>

<p>```javascript
// List of models<br/>
// models in this directory are intended for site-wide usage<br/>
// grouping site-wide models in this module (object)
// optimizes the performance and keeps dependencies organized
// when the (build) optimizer is run.
define([ "models/branding", "models/section" ],
function (Branding,          Section) {</p>

<pre><code>return {
    "Branding" : Branding,
    "Section"  : Section
};
</code></pre>

<p>});
```</p>

<h3>A quick note on code standards</h3>

<p>Notice that in the above examples the parameters may begin with lower or upper case characters. The variable names uses in the parameters that begin with <em>Uppercase</em> are <em>Constructors</em> and the <em>lowercase</em> variable names are not, they may be instances created by a constructor, or perhaps an object or function that is not meant to used with <em>new</em>.</p>

<p>The convention recommended is to use Upper CamelCase for constructors and lower camelCase for others.</p>

<h3>Common pitfall when organizing code in modules</h3>

<p>Be careful not define circular dependencies. For example, in a common <em>models</em> package (models.js) dependencies are listed for the files in your models directory</p>

<pre><code>define([ "models/branding", "models/section" ], function (branding, section)  
// ...  
return { "branding" : branding, "section", section }  
</code></pre>

<p>Then when another packages requires a common model you can access the models objects returned from your common models.js file like so...</p>

<pre><code>define([ "models", "utils" ], function (models, utils) {  
var branding = models.branding, debug = utils.debug;  
</code></pre>

<p>Perhaps after using the model a few times you get into the habit of requiring "model". Later you need add another common model with extends a model you already defined. So the pitfall begins, you add a new model inside your models directory and add a reference this same model in the model.js:</p>

<pre><code>define([ "models/branding", "models/section", "models/section-b" ], function (branding, section)  
// ...  
return { "branding" : branding, "section", section, "section-b" : section-b }
</code></pre>

<p>However in your <em>models/section-b.js</em> file you define a dependency using the model.js which returns the models in an object like so...</p>

<pre><code>define([ "models" ], function (models, utils) {  
var section = models.section;
</code></pre>

<p>Above is the mistake in models.js a dependency was added for models/section-b and in section-b a dependency is defined for model. The new models/section-b.js requires <em>model</em> and model.js requires <em>models/section-b.js</em> - a circular dependency. This should result in a load timeout error from require.js, but not tell you about the circular dependency.</p>

<p>For other common mistakes see the <a href="http://requirejs.org/docs/errors.html" title="RequireJS common errors page">COMMON ERRORS</a> page on the RequireJS site.</p>

<h4>Executing the Build with r.js</h4>

<p>If you intalled r.js with Node's npm (package manager) like so...</p>

<pre><code>&gt; npm install requirejs
</code></pre>

<p>...you can execute the build on the command line:</p>

<pre><code>&gt; r.js -o app.build.js
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js CollectionView to utilize a collection rather than a model]]></title>
    <link href="http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/backbone-dot-js-collectionview-to-utilize-a-collection-rather-than-a-model/2012/01/09/"/>
    <updated>2012-01-09T02:33:00-08:00</updated>
    <id>http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/backbone-dot-js-collectionview-to-utilize-a-collection-rather-than-a-model/2012/01/backbone-dot-js-collectionview-to-utilize-a-collection-rather-than-a-model</id>
    <content type="html"><![CDATA[<p><a href="http://documentcloud.github.com/backbone/" title="Backbone is an open-source component of DocumentCloud">Backbone.js</a> does not provide a view or controller that specifically manages a collection. <a href="http://documentcloud.github.com/backbone/#View" title="Backbone.View">Backbone view</a> objects are coupled with a <a href="http://documentcloud.github.com/backbone/#Model" title="Backbone.Model">model</a> and have render methods for presented the model data using an HTML template. However there are many instanced where a <a href="http://documentcloud.github.com/backbone/#Collection" title="Backbone.Collection">Backbone collection</a> objects (has many models) needs to be presented or managed with a single view object. Thus the need for a CollectionView constructor that implements an interface to manage many child views which render each model represented in the collection. A collection view object that generates view for each model preserves the <a href="http://documentcloud.github.com/backbone/docs/backbone.html" title="Backbone source code with inline documentation">core Backbone behavior</a> (link is to documented source, search for 'change') of firing change events on a model and a view that renders the changed data in response to the change event that was triggered by specific models.</p>

<p>Liquid Media has posted tutorials on Backbone in a 3-part series <a href="http://liquidmedia.ca/blog/2011/01/backbone-js-part-1/" title="An Intro to Backbone.js: Part 1 – Models and Collections - Liquid Media">1</a>, <a href="http://liquidmedia.ca/blog/2011/01/an-intro-to-backbone-js-part-2-controllers-and-views/" title="An Intro to Backbone.js: Part 2 – Controllers and Views - Liquid Media">2</a>, <a href="http://liquidmedia.ca/blog/2011/02/backbone-js-part-3/" title="An Intro to Backbone.js: Part 3 – Binding a Collection to a View - Liquid Media">3</a>; and the third article demonstrates the use of a <a href="http://liquidmedia.ca/blog/2011/02/backbone-js-part-3/" title="An Intro to Backbone.js: Part 3 – Binding a Collection to a View - Liquid Media">Collection View constructor</a> which does what is described above.</p>

<!--more-->


<h2>CollectionView</h2>

<p>This constructor is based on the article by Liquid Media</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Collection View  (collection.js)</span> <a href='/downloads/code/javascript/views/collection.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Collection View</span>
</span><span class='line'><span class="c1">// ---------------</span>
</span><span class='line'><span class="c1">// Manages rendering many views with a collection </span>
</span><span class='line'><span class="c1">// See: &lt;http://liquidmedia.ca/blog/2011/02/backbone-js-part-3/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The CollectionView extends BaseView and is intended for rendering a collection.</span>
</span><span class='line'><span class="c1">// A item view is required for rendering withing each iteration over the models.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Requires `define`</span>
</span><span class='line'><span class="c1">// Returns {CollectionView} constructor </span>
</span><span class='line'><span class="c1">// - instances must have a collection property</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;facade&#39;</span><span class="p">,</span><span class="s1">&#39;views/base&#39;</span><span class="p">,</span><span class="s1">&#39;utils&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">facade</span><span class="p">,</span> <span class="nx">BaseView</span><span class="p">,</span> <span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">CollectionView</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">$</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">$</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">_</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">_</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">debug</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">debug</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor `{CollectionView}` extends the BaseView.prototype</span>
</span><span class='line'>    <span class="c1">// object literal argument to extend is the prototype for the CollectionView Constructor</span>
</span><span class='line'>    <span class="nx">CollectionView</span> <span class="o">=</span> <span class="nx">BaseView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `initialize`  </span>
</span><span class='line'>        <span class="c1">// Param {Object} `options` must have a child view and tagname  </span>
</span><span class='line'>        <span class="c1">// - options should have properties: `view`, `tagName` </span>
</span><span class='line'>        <span class="nx">initialize</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">collection</span><span class="p">,</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span> <span class="o">||</span> <span class="o">!</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span> <span class="k">instanceof</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">msg</span> <span class="o">=</span> <span class="s2">&quot;CollectionView initialize: no collection provided.&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">BaseView</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_view</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">view</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">_view</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;CollectionView initialize: no view provided.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_tagName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tagName</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_tagName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;CollectionView initialize: no tag name provided.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_className</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">className</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_decorator</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">decorator</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_id</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_views</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="nx">_</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">bindAll</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="s1">&#39;remove&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">setupCollection</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `setupCollection`  </span>
</span><span class='line'>        <span class="c1">// bindings for adding and removing of models within the collection</span>
</span><span class='line'>        <span class="nx">setupCollection</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">collection</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">collection</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">collection</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">collection</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;remove&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">collection</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">collection</span><span class="p">.</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">collection</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">collection</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">collection</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">collection</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `add`  </span>
</span><span class='line'>        <span class="c1">// Param {Model} `model` object that extends Backbone.Model</span>
</span><span class='line'>        <span class="c1">// Creates a new view for models added to the collection</span>
</span><span class='line'>        <span class="nx">add</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">_view</span><span class="p">({</span>
</span><span class='line'>                <span class="s2">&quot;tagName&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tagName</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;model&quot;</span><span class="o">:</span> <span class="nx">model</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;className&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_className</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;decorator&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_decorator</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_views</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_rendered</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `remove`  </span>
</span><span class='line'>        <span class="c1">// Param {Model} `model` object that extends Backbone.Model</span>
</span><span class='line'>        <span class="c1">// removes view when model is removed from collection</span>
</span><span class='line'>        <span class="nx">remove</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">viewToRemove</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">viewToRemove</span> <span class="o">=</span> <span class="nx">_</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_views</span><span class="p">).</span><span class="nx">select</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">cv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">cv</span><span class="p">.</span><span class="nx">model</span> <span class="o">===</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>            <span class="p">})[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_views</span> <span class="o">=</span> <span class="nx">_</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_views</span><span class="p">).</span><span class="nx">without</span><span class="p">(</span><span class="nx">viewToRemove</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_rendered</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">viewToRemove</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span> <span class="c1">// $(viewToRemove.el).off().remove();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `render`  </span>
</span><span class='line'>        <span class="c1">// Iterates over collection appending views to this.$el</span>
</span><span class='line'>        <span class="c1">// When a {Function} decorator option is available manipulte views&#39; this.$el</span>
</span><span class='line'>        <span class="nx">render</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">confirmElement</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_rendered</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">_</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_views</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">decorator</span> <span class="o">&amp;&amp;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">decorator</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">view</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">fire</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">CollectionView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Header view with factory method to generate multiple collection views</h2>

<p>This view has a custom method <code>buildCollectionView</code> with is a factory for generating multiple collection view objects based on a multi-dimensional array containing segments of events by type and schedule. See the block that contains...</p>

<p>```javascript
view[schedule][type] = new views.CollectionView({</p>

<pre><code>'collection': collections[schedule][type],
'view': EventView,
'tagName': 'li',
'el': view.$('section.' + className + ' ul'),
'className': className
</code></pre>

<p>});
```</p>

<p>The CollectionView constructor requires a Backbone collection instance and a Backbone Model constructor as well as properties <code>tagname</code> and <code>el</code> which are used when initializing instances of the view constructor for each model in the collection instance.</p>

<p><em>Full implementation example</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Header View  (header.js)</span> <a href='/downloads/code/javascript/packages/header/views/header.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * header view </span>
</span><span class='line'><span class="cm"> * @requires define</span>
</span><span class='line'><span class="cm"> * @return {HL.View} constructor object</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>        <span class="s1">&#39;jquery&#39;</span><span class="p">,</span><span class="s1">&#39;underscore&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;collections&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;views/base&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;views&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;packages/header/views/event&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;packages/header/models/branding&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;packages/header/views/branding&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;packages/header/models/nav&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;packages/header/views/nav&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;utils/debug&#39;</span><span class="p">],</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">collections</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">BaseView</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">views</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">EventView</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">brandingModel</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">BrandingView</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">navModel</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">NavView</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// global header view</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">HeaderView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">HeaderView</span> <span class="o">=</span> <span class="nx">BaseView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;header&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">_el</span> <span class="o">=</span> <span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>            <span class="nx">view</span><span class="p">.</span><span class="nx">schedules</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">schedules</span> <span class="o">||</span> <span class="p">[</span><span class="s1">&#39;today&#39;</span><span class="p">,</span><span class="s1">&#39;endingSoon&#39;</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">view</span><span class="p">.</span><span class="nx">types</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">types</span> <span class="o">||</span> <span class="p">[</span><span class="s1">&#39;women&#39;</span><span class="p">,</span><span class="s1">&#39;home&#39;</span><span class="p">,</span><span class="s1">&#39;kids&#39;</span><span class="p">,</span><span class="s1">&#39;beauty&#39;</span><span class="p">,</span><span class="s1">&#39;men&#39;</span><span class="p">,</span><span class="s1">&#39;all&#39;</span><span class="p">,</span><span class="s1">&#39;getaways&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">view</span><span class="p">.</span><span class="nx">branding</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BrandingView</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">el</span> <span class="o">:</span> <span class="nx">_el</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">model</span> <span class="o">:</span> <span class="nx">brandingModel</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="nx">view</span><span class="p">.</span><span class="nx">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NavView</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">el</span> <span class="o">:</span> <span class="nx">_el</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">model</span><span class="o">:</span> <span class="nx">navModel</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="nx">view</span><span class="p">.</span><span class="nx">iterateSchedulesAndTypes</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">view</span><span class="p">,</span> <span class="nx">view</span><span class="p">.</span><span class="nx">setupCollectionReference</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;HeaderView init&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">branding</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">nav</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">iterateSchedulesAndTypes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">buildCollectionView</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">iterateSchedulesAndTypes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">renderCollectionView</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Header views rendered&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// list of collections, set order of appearance in menu by order in arrays.  </span>
</span><span class='line'>        <span class="c1">// the segmented `collections` object has multidimentional array </span>
</span><span class='line'>        <span class="c1">// using properties matching these strings. These properties can be set using</span>
</span><span class='line'>        <span class="c1">// the options object as argument durig initialization.</span>
</span><span class='line'>        <span class="c1">// TODO function to resort by members type prior to rendering</span>
</span><span class='line'>        <span class="nx">schedules</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">types</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">iterateSchedulesAndTypes</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">schedules</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">schedule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">types</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">callback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">view</span><span class="p">,</span> <span class="p">[</span><span class="nx">schedule</span><span class="p">,</span> <span class="nx">type</span><span class="p">]);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">setupCollectionReference</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">schedule</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">view</span><span class="p">[</span><span class="nx">schedule</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">view</span><span class="p">[</span><span class="nx">schedule</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">view</span><span class="p">[</span><span class="nx">schedule</span><span class="p">][</span><span class="nx">type</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">view</span><span class="p">[</span><span class="nx">schedule</span><span class="p">][</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">buildCollectionView</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">schedule</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">collection</span><span class="p">,</span> <span class="nx">className</span> <span class="o">=</span> <span class="nx">view</span><span class="p">.</span><span class="nx">setClassName</span><span class="p">(</span><span class="nx">schedule</span><span class="p">,</span> <span class="nx">type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// `collections` object should have properties with event segments</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">collections</span><span class="p">[</span><span class="nx">schedule</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="nx">collections</span><span class="p">[</span><span class="nx">schedule</span><span class="p">][</span><span class="nx">type</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;buildCollectionView cannot access collection in: collecions.&#39;</span> <span class="o">+</span> <span class="nx">schedule</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">type</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">view</span><span class="p">[</span><span class="nx">schedule</span><span class="p">][</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">views</span><span class="p">.</span><span class="nx">CollectionView</span><span class="p">({</span>
</span><span class='line'>                <span class="s1">&#39;collection&#39;</span><span class="o">:</span> <span class="nx">collections</span><span class="p">[</span><span class="nx">schedule</span><span class="p">][</span><span class="nx">type</span><span class="p">],</span>
</span><span class='line'>                <span class="s1">&#39;view&#39;</span><span class="o">:</span> <span class="nx">EventView</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;tagName&#39;</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;el&#39;</span><span class="o">:</span> <span class="nx">view</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;section.&#39;</span> <span class="o">+</span> <span class="nx">className</span> <span class="o">+</span> <span class="s1">&#39; ul&#39;</span><span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;className&#39;</span><span class="o">:</span> <span class="nx">className</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;created collection: &#39;</span> <span class="o">+</span> <span class="nx">schedule</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">type</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">setClassName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">schedule</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">className</span> <span class="o">=</span> <span class="nx">type</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">className</span> <span class="o">+=</span> <span class="nx">type</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39;-&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">className</span> <span class="o">+=</span> <span class="nx">schedule</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">className</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">renderCollectionView</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">schedule</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">view</span><span class="p">[</span><span class="nx">schedule</span><span class="p">][</span><span class="nx">type</span><span class="p">].</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;rendered collection: &#39;</span> <span class="o">+</span> <span class="nx">schedule</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">type</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">HeaderView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Examples when Collection Views are used as a product's variants for color and size</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Information View  (information.js)</span> <a href='/downloads/code/javascript/packages/product/views/information.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// information view</span>
</span><span class='line'><span class="c1">// ----------------</span>
</span><span class='line'><span class="c1">// manages many views on product page</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;mustache&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;text!packages/product/templates/information.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;views/collection&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;packages/product/views/color&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;packages/product/views/size&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;packages/product/views/price&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;packages/product/views/quantity&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Mustache</span><span class="p">,</span> <span class="nx">information_template</span><span class="p">,</span> <span class="nx">CollectionView</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">ColorView</span><span class="p">,</span> <span class="nx">SizeView</span><span class="p">,</span> <span class="nx">PriceView</span><span class="p">,</span> <span class="nx">QuantityView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;section&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;product&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;click img.swatch&#39;</span><span class="o">:</span> <span class="s1">&#39;updateColor&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;click .size&#39;</span><span class="o">:</span> <span class="s1">&#39;updateSize&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;click .cart&#39;</span><span class="o">:</span> <span class="s1">&#39;addToCart&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">_</span><span class="p">.</span><span class="nx">bindAll</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;render&#39;</span><span class="p">,</span> <span class="s1">&#39;updateColor&#39;</span><span class="p">,</span> <span class="s1">&#39;updateSize&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">colors</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CollectionView</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">collection</span><span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">view</span><span class="o">:</span> <span class="nx">ColorView</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sizesCollection</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">sizes</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sizes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CollectionView</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">collection</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">sizesCollection</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">view</span><span class="o">:</span> <span class="nx">SizeView</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">quantityView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QuantityView</span><span class="p">({</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">priceView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceView</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">collection</span><span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">quantityView</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">quantityView</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">Mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span><span class="nx">information_template</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;section.colors ul&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// sizes are rendered based off the color</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sizes</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;section.sizes ul&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">priceView</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;section.price&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">quantityView</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;section.quantity&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">defaultColor</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img.swatch&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;:first&#39;</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">updateColor</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span><span class="nx">currentColor</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sizesCollection</span><span class="p">.</span><span class="nx">byColor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">priceView</span><span class="p">.</span><span class="nx">byColorAndSize</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">updateSize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span><span class="nx">currentSize</span><span class="o">:</span> <span class="nx">size</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">priceView</span><span class="p">.</span><span class="nx">byColorAndSize</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span> <span class="nx">size</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">addToCart</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">addCurrentItemToCart</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The color collection and view used by the Information view which acts as a view manager</p>

<p><strong>Colors Collection</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Colors Collection  (colors.js)</span> <a href='/downloads/code/javascript/packages/product/collections/colors.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;packages/product/models/color&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Color</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="nx">Color</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Colors View</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Colors View  (color.js)</span> <a href='/downloads/code/javascript/packages/product/views/color.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;mustache&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;text!packages/product/templates/color.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Mustache</span><span class="p">,</span> <span class="nx">colorTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    		<span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">Mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span><span class="nx">colorTemplate</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js and Mustache.js: Small views and templates]]></title>
    <link href="http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/backbone-dot-js-and-mustache-dot-js-small-views-and-templates/2012/01/09/"/>
    <updated>2012-01-09T01:48:00-08:00</updated>
    <id>http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/backbone-dot-js-and-mustache-dot-js-small-views-and-templates/2012/01/backbone-dot-js-and-mustache-dot-js-small-views-and-templates</id>
    <content type="html"><![CDATA[<p>Short and concise HTML templates that represent repeatable blocks or isolated components of a page are easier to manage and easier for other developers to edit than longer templates which encompass larger portions of a page. A view object with the responsibility of rendering and managing multiple child views is used to organize the components of a page.</p>

<p>Consider navigation elements organized in lists under top level list items...</p>

<p>Each top level item likely uses the same child list to present it's dropdowns. Rather then use one large template and one large collection of models utilizing smaller templates as components of the view remove hardcoding the hierarchy into both the model and the template but rather move the hierarchy to the view objects used to build the page. When the structure of the child lists needs to go through the change control process for added or removed presentation or a change in the hierarchy as directed by the business, the change is simple perhaps changed one portion of a template and the order of an array which dictates the hierarchy via enumerating. Also the business may dictate that the order of the menu follows various orders depending on visitor properties (e.g. member object either male or female). Then the menu's components display order can be dictated programmatically, utilizing the small views and templates.</p>

<p>The best practice or goal emphasized above with respect to templates and views is KISS and DRY. As long as the implementation does not become overly complex and difficult to grok, keep the template code DRY, otherwise KISS principle overrides the need to have template code that does not repeat itself.</p>

<!--more-->


<h2>Code examples</h2>

<p><em>A list item that will become part of various lists:</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (event.html)</span> <a href='/downloads/code/javascript/packages/header/templates/event.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/{{event_code}}&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;{{sort_order}}&quot;</span><span class="nt">&gt;</span>{{title}}<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>A menu structure, which can be segmented using classes to target sections within the child list</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (nav.html)</span> <a href='/downloads/code/javascript/packages/header/templates/nav.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;nav&gt;</span>
</span><span class='line'>  {{#types}}
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;{{.}}&quot;</span><span class="nt">&gt;&lt;strong&gt;</span>{{.}}<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;{{.}}-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;em&gt;</span>Today&#39;s Events<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;{{.}}-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;em&gt;</span>Ending Soon<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  {{/types}}
</span><span class='line'><span class="nt">&lt;/nav&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>HTML generated from the two templates using multiple CollectionView objects managed by a parent view object</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (nav-example.html)</span> <a href='/downloads/code/html/nav-example.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;nav&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong&gt;</span>Women<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Women-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Today&#39;s Events<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12366stellaandjamiewc&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>Stella <span class="ni">&amp;amp;</span> jamie<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12590classiqueblwtwc&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Classique<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Ending Soon<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12125tahariblowoutwo&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;8&quot;</span><span class="nt">&gt;</span>Tahari Outerwear Blowout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12588ecoskinblwtwc&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;10&quot;</span><span class="nt">&gt;</span>EcoSkin Blowout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12053jewelmakblwtwj&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;11&quot;</span><span class="nt">&gt;</span>Jewelmak Blowout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12393elfcosmeticswb&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;15&quot;</span><span class="nt">&gt;</span>e.l.f. Cosmetics<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12056tedbakerwatchesunisex&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;16&quot;</span><span class="nt">&gt;</span>Ted Baker Watches<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/11634bootsitootsiwf&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;17&quot;</span><span class="nt">&gt;</span>BootsiTootsi<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Women-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12057lillybeewf&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;18&quot;</span><span class="nt">&gt;</span>Lillybee<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong&gt;</span>Home<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Home-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Today&#39;s Events<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/11296bedfordcottageblwtda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>Bedford Cottage: Throws under $49<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12368ldchomebyjoeldessauleshda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>LDC Home by Joel Dessaules<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Home-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Ending Soon<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12054ltdedthomaspaulfurniturehda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;12&quot;</span><span class="nt">&gt;</span>Limited Edition: Thomas Paul Furniture<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12367pinodenaifinearthda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;14&quot;</span><span class="nt">&gt;</span>Pino Denai (1939-2010) Fine Art Collection<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12592napastylewinecellarhda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;20&quot;</span><span class="nt">&gt;</span>Napa Style: The Wine Cellar<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12170luxuryhotelsheetsblwthda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;21&quot;</span><span class="nt">&gt;</span>Luxury Hotel Sheets Blowout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Home-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12169floorcoutureblwthda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;22&quot;</span><span class="nt">&gt;</span>Floor Couture Blowout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Kids&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong&gt;</span>Kids<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Kids-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Today&#39;s Events<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Kids-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12369miabellebabycm&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;4&quot;</span><span class="nt">&gt;</span>Mia Belle Baby<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Kids-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Ending Soon<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Kids-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12240stencilkidsblowoutcm&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;19&quot;</span><span class="nt">&gt;</span>Stencil Kids Blowout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Getaways&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong&gt;</span>Getaways<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Getaways-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Today&#39;s Events<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Getaways-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/Smoke_Tree_Ranch_Palm_Springs_622&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;5&quot;</span><span class="nt">&gt;</span>Smoke Tree Ranch Palm Springs <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Getaways-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/Amara_Resort_Sedona_623&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;6&quot;</span><span class="nt">&gt;</span>Sedona, Amara Resort <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Getaways-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/The_Andrew_Pinckney_Inn_Charleston_609&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;7&quot;</span><span class="nt">&gt;</span>The Andrew Pinckney Inn Charleston<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Getaways-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Ending Soon<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Getaways-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/Millennium_Scottsdale_Resort_Villas_608&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;23&quot;</span><span class="nt">&gt;</span>Scottsdale, Millennium Resort <span class="ni">&amp;amp;</span> Villas <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Getaways-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/Hawaii_Prince_Hotel_Waikiki_610&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;24&quot;</span><span class="nt">&gt;</span>Hawaii Prince Hotel Waikiki<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Men&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong&gt;</span>Men<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Men-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Today&#39;s Events<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Men-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Ending Soon<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Men-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12003tedbakermc&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;9&quot;</span><span class="nt">&gt;</span>Ted Baker Men<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Men-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12406mackagemo&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;13&quot;</span><span class="nt">&gt;</span>Mackage Men<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Men-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12367pinodenaifinearthda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;14&quot;</span><span class="nt">&gt;</span>Pino Denai (1939-2010) Fine Art Collection<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Men-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12056tedbakerwatchesunisex&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;16&quot;</span><span class="nt">&gt;</span>Ted Baker Watches<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Men-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12592napastylewinecellarhda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;20&quot;</span><span class="nt">&gt;</span>Napa Style: The Wine Cellar<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Men-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12170luxuryhotelsheetsblwthda&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;21&quot;</span><span class="nt">&gt;</span>Luxury Hotel Sheets Blowout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Beauty&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong&gt;</span>Beauty<span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Beauty-today&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Today&#39;s Events<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;Beauty-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;em&gt;</span>Ending Soon<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;Beauty-endingSoon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/12393elfcosmeticswb&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;15&quot;</span><span class="nt">&gt;</span>e.l.f. Cosmetics<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/nav&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Base classes with custom library functions added to Backbone.js constructors]]></title>
    <link href="http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/base-classes-with-custom-library-functions-added-to-backbone-dot-js-constructors/2012/01/09/"/>
    <updated>2012-01-09T00:51:00-08:00</updated>
    <id>http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/base-classes-with-custom-library-functions-added-to-backbone-dot-js-constructors/2012/01/base-classes-with-custom-library-functions-added-to-backbone-dot-js-constructors</id>
    <content type="html"><![CDATA[<h2>Authoring Code with Backbone.js with extendability in mind</h2>

<p>The main objective in choosing the <a href="http://documentcloud.github.com/backbone/" title="Backbone is an open-source component of DocumentCloud">Backbone.js</a> library for our frontend framework is to author code in an organized and repeatable manner, building an application "the Backbone way". The benefits are that the community has contributed documenation, blogs, code examples, tutorials, videos and books so that building a JavaScript application with our framework should be straight forward (not too much magic under cover).</p>

<p>However when building both the mobile and desktop applications or in the future we need added behavior recuired to provide a solution for the business requirements/needs of the Web application. Hence the need for an (abstract class) object as the <strong>base constructor</strong> for our framework. Each <strong>base</strong> object extends the appropriate Backbone constructor method: <a href="http://documentcloud.github.com/backbone/#Model" title="Backbone.Model">Backbone.Model</a>, <a href="http://documentcloud.github.com/backbone/#View" title="Backbone.View">Backbone.View</a>, <a href="http://documentcloud.github.com/backbone/#Collection" title="Backbone.Collection">Backbone.Collection</a> and <a href="http://documentcloud.github.com/backbone/#Router" title="Backbone.Router">Backbone.Router</a>.</p>

<!--more-->


<p>For example <a href="http://docs.jquery.com/Main_Page" title="jQuery documentation">jQuery</a> provides a "Deferred" constructor function "<a href="http://api.jquery.com/category/deferred-object/" title="Deferred Object: jQuery.Deferred()">jQuery.Deferred()</a>" based on the CommonJS Promises/A.</p>

<blockquote><p>"introduces several enhancements to the way callbacks are managed and invoked. In particular, jQuery.Deferred() provides flexible ways to provide multiple callbacks, and these callbacks can be invoked regardless of whether the original callback dispatch has already occurred." - <a href="http://api.jquery.com/category/deferred-object/" title="Deferred Object: jQuery.Deferred()">jQuery API: Deferred Object</a></p></blockquote>

<h2>Base constructors which extend Backbone.js constructors</h2>

<h3>Base Model</h3>

<p>This object extends the Backbone.Model constructor adding methods for calling <code>__super__</code> and insuring that only a instance of a Backbone.Model's initialization methods is called when calling <code>this.__super__.initialize.call(this);</code> within an instance. Backbone constructors and be further extend and utilize JavaScript prototypal inheritance so this <code>__super__</code> method is sugar for <code>this.constructor.prototype.initialize.call(this, attributes, options)</code> but insuring that null or undefined is not called but rather the initialize method of an ancestor of the Backbone instance object not a native JavaScript object's constructor which does not have an initialize function. Also the base object has a property named "deferred" which will be an instance of the jQuery.Deferred object when the constructor is initialized. A deferred object is vary useful to modules that require a instance of the Backbone model that fetches data from our RESTful api. Or when extending/decorating a constructor with additional methods and adding more "done" callbacks</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (base.js)</span> <a href='/downloads/code/javascript/models/base.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Base Model  </span>
</span><span class='line'><span class="c1">// -------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Requires `define`  </span>
</span><span class='line'><span class="c1">// Return {BaseModel} object as constructor</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;facade&#39;</span><span class="p">,</span> <span class="s1">&#39;utils&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">facade</span><span class="p">,</span> <span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">BaseModel</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">$</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">$</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">_</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">_</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lib</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">baselib</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ajaxOptions</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">ajaxOptions</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">debug</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">debug</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor `{BaseModel}` extends Backbone.Model.prototype</span>
</span><span class='line'>    <span class="c1">// object literal argument to extend is the prototype for the BaseModel constructor</span>
</span><span class='line'>    <span class="nx">BaseModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Param {Object} `attributes` set on model when creating an instance  </span>
</span><span class='line'>        <span class="c1">// Param {Object} `options`  </span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// debug.log(&quot;BaseModel init called&quot;);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// Backbone.Model.prototype.initialize.call(this, arguments);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Property:** `request` - assign fetch return value to this.request property, </span>
</span><span class='line'>        <span class="c1">// fetch returns (jQuery) ajax promise object</span>
</span><span class='line'>        <span class="nx">request</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `fetch`</span>
</span><span class='line'>        <span class="c1">// Wrap Backbone.Model.prototype.fetch with support for deferreds</span>
</span><span class='line'>        <span class="nx">fetch</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">options</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fetchSuccess</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">options</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fetchError</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">ajaxOptions</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">request</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fetch</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Default success and error handlers used with this.fetch() ...</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `fetchSuccess` - resolve the deferred here in success</span>
</span><span class='line'>        <span class="nx">fetchSuccess</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">deferred</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">model</span><span class="p">.</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">model</span><span class="p">.</span><span class="nx">request</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">model</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `fetchError` - log response on error</span>
</span><span class='line'>        <span class="nx">fetchError</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">model</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Primarily a tool for unit tests... Don&#39;t rely on calling this.isReady!!</span>
</span><span class='line'>        <span class="nx">isReady</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">isResolved</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">isResolved</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `setOptions` - set urlRoot</span>
</span><span class='line'>        <span class="nx">setOptions</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">urlRoot</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">urlRoot</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">urlRoot</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">truncateString</span><span class="o">:</span> <span class="nx">lib</span><span class="p">.</span><span class="nx">truncateString</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">BaseModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Other BASE objects borrowing the same implementation</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (base.js)</span> <a href='/downloads/code/javascript/views/base.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Base View</span>
</span><span class='line'><span class="c1">// ---------</span>
</span><span class='line'><span class="c1">// A view object to construct a standard view with common properties and utilties</span>
</span><span class='line'><span class="c1">// The base view extends Backbone.View adding methods for resolving deferreds, </span>
</span><span class='line'><span class="c1">// rendering, decorating data just in time for rendering, adding child views to </span>
</span><span class='line'><span class="c1">// form a composite of views under one view object, add a destroy method.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Example use for a composite view utilizing addChildView, setOptions &amp; callbacks:</span>
</span><span class='line'><span class="c1">// </span>
</span><span class='line'><span class="c1">//     MyCompositeViewConstructor = BaseView.extend({</span>
</span><span class='line'><span class="c1">//     </span>
</span><span class='line'><span class="c1">//         template: myHTMLTemplate,</span>
</span><span class='line'><span class="c1">//     </span>
</span><span class='line'><span class="c1">//         initialize: function (options) {</span>
</span><span class='line'><span class="c1">//             _.bindAll(this);</span>
</span><span class='line'><span class="c1">//             this.setOptions();</span>
</span><span class='line'><span class="c1">//             BaseView.prototype.initialize.call(this, options);</span>
</span><span class='line'><span class="c1">//         },</span>
</span><span class='line'><span class="c1">//     </span>
</span><span class='line'><span class="c1">//         dataDecorator: function (data) {</span>
</span><span class='line'><span class="c1">//             data.myExtraProperty = &#39;stuff I added just in time to render&#39;;</span>
</span><span class='line'><span class="c1">//             return data;</span>
</span><span class='line'><span class="c1">//         },</span>
</span><span class='line'><span class="c1">//     </span>
</span><span class='line'><span class="c1">//         setOptions: function () {</span>
</span><span class='line'><span class="c1">//             var msg;</span>
</span><span class='line'><span class="c1">//             if (!this.options || !this.options.childView) {</span>
</span><span class='line'><span class="c1">//                 msg = &quot;MyCompositeViewConstructor requires a options.childView object&quot;;</span>
</span><span class='line'><span class="c1">//                 throw new Error(msg);</span>
</span><span class='line'><span class="c1">//             }</span>
</span><span class='line'><span class="c1">//             this.addChildView();</span>
</span><span class='line'><span class="c1">//         },</span>
</span><span class='line'><span class="c1">//     </span>
</span><span class='line'><span class="c1">//         addChildView: function () {</span>
</span><span class='line'><span class="c1">//             var childView = this.options.childView, renderChildView;</span>
</span><span class='line'><span class="c1">//     </span>
</span><span class='line'><span class="c1">//             renderChildView = BaseView.prototype.addChildView(childView);</span>
</span><span class='line'><span class="c1">//             this.callbacks.add(renderChildView);</span>
</span><span class='line'><span class="c1">//         }</span>
</span><span class='line'><span class="c1">//     });</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Requires `define`</span>
</span><span class='line'><span class="c1">// Return `{BaseView}` constructor</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;facade&#39;</span><span class="p">,</span> <span class="s1">&#39;facade&#39;</span><span class="p">,</span> <span class="s1">&#39;utils&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">facade</span><span class="p">,</span> <span class="nx">facade</span><span class="p">,</span> <span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">BaseView</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">$</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">$</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">_</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">_</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">_toHTML</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">toHTML</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">Deferred</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">Callbacks</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lib</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">baselib</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">debug</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">debug</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor `{BaseView}` extends Backbone.Model.prototype</span>
</span><span class='line'>    <span class="c1">// object literal argument to extend is the prototype for the BaseView constructor</span>
</span><span class='line'>    <span class="nx">BaseView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `initialize`  </span>
</span><span class='line'>        <span class="c1">// Param {Object} `options`  </span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span> <span class="o">=</span> <span class="nx">Callbacks</span><span class="p">(</span><span class="s1">&#39;unique&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `setOptions`  </span>
</span><span class='line'>        <span class="c1">// Param {Object} `options`  </span>
</span><span class='line'>        <span class="c1">// handle options passed to initialize, e.g. required properties/errors</span>
</span><span class='line'>        <span class="nx">setOptions</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">destination</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">destination</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">destination</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">template</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `render`  </span>
</span><span class='line'>        <span class="c1">// Standarization of the task to render a view using a model &amp; template</span>
</span><span class='line'>        <span class="c1">// Options available:  </span>
</span><span class='line'>        <span class="c1">// - Method to add the resulting markiup to the dom  </span>
</span><span class='line'>        <span class="c1">// - Callback to mutate the model&#39;s data after model.toJSON() called  </span>
</span><span class='line'>        <span class="c1">//   - Merging data to template happens after dataDecorator is applied  </span>
</span><span class='line'>        <span class="c1">// - Callbacks object can be filled with ancillerary work following render</span>
</span><span class='line'>        <span class="c1">//   - E.g. callbacks list can trigger rendering of child views  </span>
</span><span class='line'>        <span class="c1">// Param {String} `domInsertion` - gives option for adding result to dom  </span>
</span><span class='line'>        <span class="c1">// Param {Function} `dataDecorator` - accepts arg for {Object} `data`  </span>
</span><span class='line'>        <span class="c1">// Returns the same (mutated) {Object} `data`</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">domInsertion</span><span class="p">,</span> <span class="nx">dataDecorator</span><span class="p">,</span> <span class="nx">partials</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">markup</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">confirmElement</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">dataDecorator</span> <span class="o">=</span> <span class="nx">dataDecorator</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">dataDecorator</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">markup</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">toHTML</span><span class="p">(</span><span class="nx">dataDecorator</span><span class="p">,</span> <span class="nx">partials</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">domInsertion</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">domInsertionMethod</span><span class="p">(</span><span class="nx">domInsertion</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">[</span><span class="nx">domInsertion</span><span class="p">](</span><span class="nx">markup</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">fire</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `resolve`  </span>
</span><span class='line'>        <span class="c1">// Resolve the view&#39;s deferred object after all callbacks are fired once.</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">isResolved</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `confirmElement`  </span>
</span><span class='line'>        <span class="c1">// A view needs an `el` property and `$el` too; a helper to check that this.el is OK.</span>
</span><span class='line'>        <span class="nx">confirmElement</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">$el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;View has no this.el or this.options.el property defined.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `toHTML`  </span>
</span><span class='line'>        <span class="c1">// A wrapper for the task of merging a Mustache.js template with preprocessing</span>
</span><span class='line'>        <span class="c1">// Handles the merging of JSON data from model with a HTML template {{vars}}</span>
</span><span class='line'>        <span class="c1">// Prior to merging the template the data can be changed with dataDecorator  </span>
</span><span class='line'>        <span class="c1">// Requires _toHTML an alias for the applications templating method  </span>
</span><span class='line'>        <span class="c1">// Param {Function} `dataDecorator` - accepts and returns a {Object} `data`  </span>
</span><span class='line'>        <span class="c1">// Param {Object} `partials` - see Mustache.js documentation.</span>
</span><span class='line'>        <span class="nx">toHTML</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">dataDecorator</span><span class="p">,</span> <span class="nx">partials</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">markup</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">args</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">data</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">dataDecorator</span> <span class="o">&amp;&amp;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">dataDecorator</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">data</span> <span class="o">=</span> <span class="nx">dataDecorator</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">template</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">||</span> <span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;BaseView method toHTML called, but this.template or data is not defined.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">markup</span> <span class="o">=</span> <span class="nx">_toHTML</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">partials</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">markup</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `domInsertionMethod` - used when rendering to add markup to dom  </span>
</span><span class='line'>        <span class="c1">// Default is `html` however this is configurable to support :  </span>
</span><span class='line'>        <span class="c1">//  - &#39;append&#39;, &#39;html&#39;, &#39;prepend&#39;, &#39;text&#39;</span>
</span><span class='line'>        <span class="nx">domInsertionMethod</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">domInsertionMethod</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">defaultMethod</span> <span class="o">=</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">domInsertionMethods</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;append&#39;</span><span class="p">,</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="s1">&#39;prepend&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">domInsertion</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">domInsertionMethod</span> <span class="o">!==</span> <span class="nx">defaultMethod</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">domInsertionMethod</span> <span class="o">&amp;&amp;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">domInsertionMethod</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">domInsertionMethods</span><span class="p">,</span> <span class="nx">domInsertionMethod</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">domInsertion</span> <span class="o">=</span> <span class="nx">domInsertionMethod</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">domInsertion</span> <span class="o">||</span> <span class="nx">defaultMethod</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `dataDecorator`  </span>
</span><span class='line'>        <span class="c1">// No-op re-define as needed as hook to modify model data just before rendering</span>
</span><span class='line'>        <span class="nx">dataDecorator</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">data</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Property:** {Object} `callbacks` - list of callbacks</span>
</span><span class='line'>        <span class="c1">// Child views or render stages can be managed using jQuery Callbacks</span>
</span><span class='line'>        <span class="c1">// this should be an Callbacks object for each instance, so the </span>
</span><span class='line'>        <span class="c1">// initialize method sets the Callbacks object</span>
</span><span class='line'>        <span class="nx">callbacks</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Property:** {Object} `deferred` - implements a jQuery.Deferred interface</span>
</span><span class='line'>        <span class="c1">// Initialization or other criteria to resolve whether view is ready </span>
</span><span class='line'>        <span class="c1">// can be handled with jQuery Deferred, this should be an deferred </span>
</span><span class='line'>        <span class="c1">// object for each instance, the initialize method sets the </span>
</span><span class='line'>        <span class="c1">// deferred instance.</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Primarily a tool for unit tests... Don&#39;t rely on calling this.isReady!!</span>
</span><span class='line'>        <span class="nx">isReady</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">isResolved</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `addChildView`  </span>
</span><span class='line'>        <span class="c1">// For a composite view this method can add multiple view objects</span>
</span><span class='line'>        <span class="c1">// Setup child views which can be rendered or appended to another context</span>
</span><span class='line'>        <span class="nx">addChildView</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">view</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">callbackFn</span><span class="p">,</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">msg</span> <span class="o">=</span> <span class="s2">&quot;baseView addChildView expects view object as first arg.&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">context</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">context</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">callbackFn</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>                    <span class="nx">view</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">$el</span><span class="p">);</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">callbackFn</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">callbackFn</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `getOuterHtml` - utility fn  </span>
</span><span class='line'>        <span class="c1">// Using outerHTML with any browser via jQuery fallback when not supported</span>
</span><span class='line'>        <span class="nx">getOuterHtml</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">outerHTML</span><span class="p">)</span> <span class="o">?</span> <span class="nx">obj</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">outerHTML</span> <span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">clone</span><span class="p">()</span> <span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `destroy` - used to teardown a view object  </span>
</span><span class='line'>        <span class="c1">// Best practice to avoid memory leaks is to remove references between objects</span>
</span><span class='line'>        <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">removeSubscribers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">removeSubscribers</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">destination</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">destination</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">delete</span> <span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `addSubscribers`  </span>
</span><span class='line'>        <span class="c1">// No-op re-define as needed, for Channel pub/sub or other event bindings</span>
</span><span class='line'>        <span class="nx">addSubscribers</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `removeSubscribers`  </span>
</span><span class='line'>        <span class="c1">// Re-define as needed used by this.destroy() to remove pub/sub bindings</span>
</span><span class='line'>        <span class="nx">removeSubscribers</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">off</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">BaseView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (base.js)</span> <a href='/downloads/code/javascript/collections/base.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Base Collection</span>
</span><span class='line'><span class="c1">// ---------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Requires `define`  </span>
</span><span class='line'><span class="c1">// Return {BaseCollection} object as constructor</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;facade&#39;</span><span class="p">,</span> <span class="s1">&#39;utils&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">facade</span><span class="p">,</span> <span class="nx">utils</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">BaseCollection</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">$</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">$</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">_</span> <span class="o">=</span> <span class="nx">facade</span><span class="p">.</span><span class="nx">_</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lib</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">baselib</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ajaxOptions</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">ajaxOptions</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">debug</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">debug</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor `{BaseCollection}` extends Backbone.Collection.prototype</span>
</span><span class='line'>    <span class="c1">// object literal argument to extend is the prototype for the BaseCollection constructor</span>
</span><span class='line'>    <span class="nx">BaseCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `initialize`  </span>
</span><span class='line'>        <span class="c1">// Param {Object} `models` - added during call to new BaseCollection([/*models*/])  </span>
</span><span class='line'>        <span class="c1">// Param {Object} `options` - add a comparator</span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;BaseCollection initialize...&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">cid</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cid</span> <span class="o">||</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// When overriding use: `Backbone.Collection.prototype.initialize.call(this, arguments);`</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Property:** `request` - assign fetch return value to this.request property, </span>
</span><span class='line'>        <span class="c1">// fetch returns (jQuery) ajax promise object</span>
</span><span class='line'>        <span class="nx">request</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `fetch`  </span>
</span><span class='line'>        <span class="c1">// Wrap Backbone.Collection.prototype.fetch with support for deferreds</span>
</span><span class='line'>        <span class="nx">fetch</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">options</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fetchSuccess</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">options</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fetchError</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">ajaxOptions</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">request</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fetch</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">request</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Primarily a tool for unit tests... Don&#39;t rely on calling this.isReady!!</span>
</span><span class='line'>        <span class="nx">isReady</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">isResolved</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">isResolved</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Default success and error handlers used with this.fetch() ...</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `fetchSuccess` - resolve the deferred here in success</span>
</span><span class='line'>        <span class="nx">fetchSuccess</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// **Method:** `fetchError` - log response on error</span>
</span><span class='line'>        <span class="nx">fetchError</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">BaseCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Using a base constructor</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (events.js)</span> <a href='/downloads/code/javascript/collections/events.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Events Collection  </span>
</span><span class='line'><span class="c1">// -----------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// @requires `define`  </span>
</span><span class='line'><span class="c1">// @return {BaseCollection} EventsCollection instance</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span><span class="s1">&#39;underscore&#39;</span><span class="p">,</span><span class="s1">&#39;models&#39;</span><span class="p">,</span><span class="s1">&#39;collections/base&#39;</span><span class="p">,</span><span class="s1">&#39;utils/debug&#39;</span><span class="p">],</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span>      <span class="nx">_</span><span class="p">,</span>           <span class="nx">models</span><span class="p">,</span>  <span class="nx">BaseCollection</span><span class="p">,</span>    <span class="nx">debug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">EventsCollection</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">eventsModel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">models</span><span class="p">.</span><span class="nx">EventsData</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">Event</span> <span class="o">=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Event</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">EventsCollection</span> <span class="o">=</span> <span class="nx">BaseCollection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="nx">Event</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">collection</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">data</span> <span class="o">=</span> <span class="nx">eventsModel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">collection</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">EventsCollection</span><span class="p">.</span><span class="nx">__super__</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;EventsCollection initialized using eventsData.get(&#39;events&#39;).&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="nx">data</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">collection</span><span class="p">.</span><span class="nx">models</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;events&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">collection</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">comparator</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">event</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">isReady</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="nx">eventsModel</span><span class="p">.</span><span class="nx">isReady</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">isResolved</span><span class="p">());</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">EventsCollection</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Extending a Collection instance by inheriting it's constructor</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (events-segments.js)</span> <a href='/downloads/code/javascript/collections/events-segments.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Events Segments Collection  </span>
</span><span class='line'><span class="c1">// -----------------</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// @requires `define`  </span>
</span><span class='line'><span class="c1">// @return {Array} `segments` multi-dimensional array[schedule][type] </span>
</span><span class='line'><span class="c1">// with collection {EventsSegmentCollection} instances</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span><span class="s1">&#39;underscore&#39;</span><span class="p">,</span><span class="s1">&#39;collections/events&#39;</span><span class="p">,</span><span class="s1">&#39;utils/baselib&#39;</span><span class="p">,</span><span class="s1">&#39;utils/debug&#39;</span><span class="p">],</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span>      <span class="nx">_</span><span class="p">,</span>           <span class="nx">eventsCollection</span><span class="p">,</span>    <span class="nx">baselib</span><span class="p">,</span>        <span class="nx">debug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">EventsSegmentCollection</span><span class="p">,</span> <span class="nx">types</span><span class="p">,</span> <span class="nx">schedules</span><span class="p">,</span> <span class="nx">segments</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Subclass for creating specific segments of a collection</span>
</span><span class='line'>    <span class="nx">EventsSegmentCollection</span> <span class="o">=</span> <span class="nx">eventsCollection</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="nx">eventsCollection</span><span class="p">.</span><span class="nx">model</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// @param `options` should have type and schedule properties to filter the collection by  </span>
</span><span class='line'>        <span class="c1">// @param `models` is not really needed, (this is the args format Backbone uses)</span>
</span><span class='line'>        <span class="c1">// when null/undefined is passed the model will filter the events collection using options param</span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">type</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">schedule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;EventsSegmentCollection expected options parameter with type and schedule properties.&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// type and schedule properties are used to filter the collection</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">schedule</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">schedule</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// use events collection models with falsy models argument, e.g. null</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">models</span> <span class="o">=</span> <span class="nx">models</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">selectFilters</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// set this inherited property as resolved</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Methods to filter collection and match schedule and/or type</span>
</span><span class='line'>        <span class="c1">// filter method is Backbone pointer to Underscore collection `filter` method</span>
</span><span class='line'>        <span class="c1">// @see &lt;http://documentcloud.github.com/backbone/#Collection-Underscore-Methods&gt;</span>
</span><span class='line'>        <span class="c1">// collection&#39;s properties `type` and `schedule` are setup during initialization </span>
</span><span class='line'>        <span class="nx">selectFilters</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">collection</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">models</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;All&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">models</span> <span class="o">=</span> <span class="nx">eventsCollection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">schedule</span> <span class="o">&amp;&amp;</span> <span class="nx">model</span><span class="p">.</span><span class="nx">schedule</span> <span class="o">===</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">schedule</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">models</span> <span class="o">=</span> <span class="nx">eventsCollection</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">found</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">schedule</span> <span class="o">&amp;&amp;</span> <span class="nx">model</span><span class="p">.</span><span class="nx">schedule</span> <span class="o">===</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">schedule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">types</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">collection</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span> <span class="nx">model</span><span class="p">.</span><span class="nx">types</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">found</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">found</span><span class="p">;</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">models</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create segmented collections from the events collection</span>
</span><span class='line'>    <span class="c1">// e.g. &#39;events.today.Women&#39;, &#39;events.ending_soon.Home&#39;</span>
</span><span class='line'>    <span class="c1">// events objects are expected to have type and schedule properties</span>
</span><span class='line'>    <span class="c1">// the strings in the schedules and type array match values on the event properties</span>
</span><span class='line'>    <span class="nx">schedules</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;today&#39;</span><span class="p">,</span> <span class="s1">&#39;ending_soon&#39;</span> <span class="cm">/*, &#39;upcoming&#39; */</span> <span class="p">];</span>
</span><span class='line'>    <span class="nx">types</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Beauty&#39;</span><span class="p">,</span> <span class="s1">&#39;Getaways&#39;</span><span class="p">,</span> <span class="s1">&#39;Home&#39;</span><span class="p">,</span> <span class="s1">&#39;Kids&#39;</span><span class="p">,</span> <span class="s1">&#39;Men&#39;</span><span class="p">,</span> <span class="s1">&#39;Women&#39;</span><span class="p">,</span> <span class="s1">&#39;All&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// segments are combinations of schedules and types, e.g. `today` and `Beauty`</span>
</span><span class='line'>    <span class="nx">segments</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// iterate over schedules and types to build new collections by segments</span>
</span><span class='line'>    <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">schedules</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">schedule</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">segments</span><span class="p">[</span><span class="nx">schedule</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">types</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">segments</span><span class="p">[</span><span class="nx">schedule</span><span class="p">][</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventsSegmentCollection</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="nx">type</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;schedule&quot;</span> <span class="o">:</span> <span class="nx">schedule</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">segments</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Views using Mustache Templates]]></title>
    <link href="http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/backbone-views-using-mustache-templates/2012/01/08/"/>
    <updated>2012-01-08T23:35:00-08:00</updated>
    <id>http://pixelhandler.github.com/vertebrae http://pixelhandler.github.com/vertebrae/notes/backbone-views-using-mustache-templates/2012/01/backbone-views-using-mustache-templates</id>
    <content type="html"><![CDATA[<h2>Using Mustache.js</h2>

<p>Mustache is a template library based on logic-less templates and the JavaScript implementation can be executed on the client side. The basic usage takes two components:</p>

<ol>
<li>An HTML template with variables embedded inside double curly braces, e.g. <em>&lt;p&gt;&#123;&#123;myVar&#125;&#125;&lt;/p&gt;</em></li>
<li>A JSON object with data containing the named object referenced in the template e.g. <em>{ "myVar" : "Sting value here" }</em>.</li>
</ol>


<p>The <a href="https://github.com/janl/mustache.js" title="Mustache.js source code and documentation on github">Mustache.js</a> api provides a method <code>Mustache.to_html()</code> which compiles the template code with the JSON object to produce a string to insert into the DOM. For example: <code>rendered = Mustache.to_html(view.template, view.model.toJSON());</code></p>

<h2>Simple template used to render a list item</h2>

<p>This example will be used by a Backbone View object's render method which will be used within a CollectionView object with the responsibility of building views from a Backbone collection object</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (event.html)</span> <a href='/downloads/code/javascript/packages/header/templates/event.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/event/{{event_code}}&quot;</span> <span class="na">data-sort=</span><span class="s">&quot;{{sort_order}}&quot;</span><span class="nt">&gt;</span>{{title}}<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>JSON Data: Event object</h2>

<p>The data below includes the variables (<em>event_code</em>, <em>sort_order</em>, <em>title</em>) referenced in the the template and other data not utilized in the template.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (event-object.json)</span> <a href='/downloads/code/json/event-object.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;event_id&quot;</span><span class="o">:</span> <span class="s2">&quot;12366&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;event_code&quot;</span><span class="o">:</span> <span class="s2">&quot;12366stellaandjamiewc&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;start_date&quot;</span><span class="o">:</span> <span class="s2">&quot;2011-12-28T08:00:00-08:00&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;end_date&quot;</span><span class="o">:</span> <span class="s2">&quot;2011-12-30T08:00:00-08:00&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;image_url&quot;</span><span class="o">:</span> <span class="s2">&quot;/assets/12366stellaandjamiewc/event-small.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;info&quot;</span><span class="o">:</span> <span class="s2">&quot;/assets/12366stellaandjamiewc/info.txt&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;video&quot;</span><span class="o">:</span> <span class="s2">&quot;/assets/12366stellaandjamiewc/video.mp4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Stella &amp; jamie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;tagline&quot;</span><span class="o">:</span> <span class="s2">&quot;Sequins and detailing that dress things up&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;event_types&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Women&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;meta&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;msa&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="s2">&quot;Active&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;private_event&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;exclusive&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;preview&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;nested&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;parents&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>            <span class="s2">&quot;children&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>            <span class="s2">&quot;siblings&quot;</span><span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Sequins and detailing that dress things up.&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;coa&quot;</span><span class="o">:</span> <span class="s2">&quot;womens_apparel&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;sort_order&quot;</span><span class="o">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;category&quot;</span><span class="o">:</span> <span class="s2">&quot;Accessories&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;event_display_format&quot;</span><span class="o">:</span> <span class="s2">&quot;Regular&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Backbone View in a AMD module utilizing Mustache within it's render() method</h2>

<p>The module requires a text/html file by including a string in the dependencies array : <code>'text!packages/header/templates/event.html'</code> and assigns the text string to the variable listed in the anonymous function's arguments named: <code>eventTemplate</code>. The JSON data is injected when this view constructor is initialized by calling the construction function with the "new" operator and passing in the JSON object as the model data, e.g. <code>"model" : new EventView(model),</code></p>

<p>The code <code>rendered = Mustache.to_html(view.template, view.model.toJSON());</code> has a (string) template as the first argument and the second argument is the JSON data object. The result of this <code>to_html</code> method is assigned to the variable <code>rendered</code>. Then the view instance's "render()" method inserts the rendered html into the DOM reference by the Backbone View object's "el" property... <code>$(view.el).html(rendered);</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (event.js)</span> <a href='/downloads/code/javascript/packages/header/views/event.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// event view </span>
</span><span class='line'><span class="c1">// ----------</span>
</span><span class='line'><span class="c1">// @requires define</span>
</span><span class='line'>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;underscore&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;views/base&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;text!packages/header/templates/event.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;mustache&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;utils/debug&#39;</span><span class="p">],</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">BaseView</span><span class="p">,</span> <span class="nx">eventTemplate</span><span class="p">,</span> <span class="nx">Mustache</span><span class="p">,</span> <span class="nx">debug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">EventView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">EventView</span> <span class="o">=</span> <span class="nx">BaseView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">eventTemplate</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;EventView init&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">rendered</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">rendered</span> <span class="o">=</span> <span class="nx">Mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">template</span><span class="p">,</span> <span class="nx">view</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">());</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">rendered</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">debug</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;EventView rendered&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">view</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">EventView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Summary</h2>

<p>Mustache.js is the template library selected primarily because of the fact that the library is "logic-less" and also is a popular choice since <a href="http://mustache.github.com/" title="Mustache library">Mustache</a> is implemmented in a wide variety of languages. The fact that no logic is executed in rendering a Mustache template insures that bugs are highly unlikely to be caused due to some logic failing within the operation of executing the template method to render an object as HTML. Logic can be added to the Mustache template within the JavaScript code (e.g. a module for creating a View constructor) which allows for unit testing and debugging utilizing a breakpoint in the code. See the <a href="https://github.com/janl/mustache.js" title="Mustache.js source code and documentation on github">Mustache.js documentation</a> for using conditions, enumerable objects, partials an other Mustache interface functions to for authoring templates with JavaScript, HTML and JSON.</p>
]]></content>
  </entry>
  
</feed>
